{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","calories","image","ingredients","url","className","style","recipe","map","ingredient","text","src","alt","href","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","ca","key","label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,mNCkB3CC,EAhBA,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAMC,EAAmC,EAAnCA,SAASC,EAA0B,EAA1BA,MAAMC,EAAoB,EAApBA,YAAYC,EAAQ,EAARA,IAC9C,OACI,yBAAKC,UAAWC,IAAMC,QAClB,4BAAKP,GACL,4BACKG,EAAYK,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,UAGxB,2BAAG,8CAA4BT,GAC/B,yBAAKI,UAAWC,IAAMJ,MAAOS,IAAKT,EAAOU,IAAI,KAC7C,mDAAgC,uBAAGC,KAAMT,GAAMA,KCyC5CU,EAnDH,WACV,IADgB,EAGeC,mBAAS,IAHxB,mBAGTC,EAHS,KAGCC,EAHD,OAIaF,mBAAS,IAJtB,mBAITG,EAJS,KAIAC,EAJA,OAKSJ,mBAAS,WALlB,mBAKTK,EALS,KAKHC,EALG,KAOhBC,qBAAU,WACRC,MACA,CAACH,IAEH,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACKC,MAAM,mCAAD,OAAoCL,EAApC,mBAXd,WAWc,oBAVb,qCASG,cACbM,EADa,gBAEAA,EAASC,OAFT,OAEbC,EAFa,OAGnBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJE,2CAAH,qDAkBhB,OACE,yBAAKxB,UAAU,OACb,wBAAIA,UAAU,UAAd,iBACA,0BAAM2B,SAVM,SAAAC,GAChBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAOqBd,UAAU,eACnC,2BAAOA,UAAU,aAAa8B,KAAO,OAAOC,MAAOlB,EAAQmB,SAf9C,SAAAJ,GACnBd,EAAWc,EAAEK,OAAOF,UAed,4BAAQ/B,UAAU,gBAAgB8B,KAAO,SAASI,IAAE,GAApD,WAEF,yBAAKlC,UAAU,WACdW,EAAQR,KAAI,SAAAD,GAAM,OACjB,kBAAC,EAAD,CAAQiC,IAAKjC,EAAOA,OAAOkC,MAC3BzC,MAAOO,EAAOA,OAAOkC,MACrBxC,SAAUM,EAAOA,OAAON,SACxBC,MAAOK,EAAOA,OAAOL,MACrBC,YAAaI,EAAOA,OAAOJ,YAC3BC,IAAKG,EAAOA,OAAOH,YCnCPsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.279887f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__lDuV7\",\"image\":\"recipe_image__h4sXq\"};","import React from 'react'\r\nimport style from './recipe.module.css'\r\n\r\nconst Recipe = ({title,calories,image,ingredients,url}) =>{\r\n    return(\r\n        <div className={style.recipe}>\r\n            <h1>{title}</h1>\r\n            <ol>\r\n                {ingredients.map(ingredient => (\r\n                    <li>{ingredient.text}</li>\r\n                ))}\r\n            </ol>\r\n            <p><strong>Calories: </strong>{calories}</p>\r\n            <img className={style.image} src={image} alt=''/>\r\n            <strong>Full Recipe at:</strong><a href={url}>{url}</a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Recipe","import React,{useState, useEffect} from 'react';\nimport './App.css';\nimport Recipe from './Recipe'\n\nconst App = () => {\n  const APP_ID = '82a867e7';\n  const APP_KEY = 'e28f94ebb7f6a51343792af6345bc23f';\n  const [recipes , setRecipes] = useState([]);\n  const [search , setSearch] = useState('');\n  const [query,setQuery] = useState('Chicken');\n\n  useEffect(() => {\n    getRecipes();\n  },[query]); //[] -> data is fetched only once when page loads \n\n  const getRecipes = async () => {\n  const response = await  fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`)\n  const data = await response.json(); // formatting data to work easily with it. Await as it is an external request\n  setRecipes(data.hits);\n  console.log(data.hits);\n};\n\nconst updateSearch = e =>{\n  setSearch (e.target.value);\n}\n\nconst getSearch = e =>{\n  e.preventDefault();\n  setQuery(search);\n  setSearch('');\n}\n\n\n  return(\n    <div className='App'>\n      <h1 className='header'>Recipe Search</h1>\n      <form onSubmit={getSearch} className='search-form'>\n        <input className='search-bar' type = 'text' value={search} onChange={updateSearch}/>\n        <button className='search-button' type = 'submit' ca>Search</button>\n      </form>\n      <div className='recipes'>\n      {recipes.map(recipe => (\n        <Recipe key={recipe.recipe.label} \n        title={recipe.recipe.label} \n        calories={recipe.recipe.calories} \n        image={recipe.recipe.image}\n        ingredients={recipe.recipe.ingredients}\n        url={recipe.recipe.url}/>\n      ))}\n      </div>\n    </div>\n  )\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}